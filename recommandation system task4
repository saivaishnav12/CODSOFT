import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
data = {
    'title': [
        'The Matrix', 'John Wick', 'The Notebook',
        'Avengers: Endgame', 'Inception', 'Interstellar',
        'Titanic', 'The Godfather', 'The Dark Knight', 'La La Land'
    ],
    'description': [
        'sci-fi action hacker dystopia',
        'action assassin revenge thriller',
        'romantic drama love story',
        'superheroes action adventure',
        'sci-fi thriller dream heist',
        'space travel sci-fi future',
        'romance tragedy ship iceberg',
        'crime mafia family drama',
        'dark superhero justice crime',
        'musical romance hollywood'
    ]
}
df = pd.DataFrame(data)
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['description'])
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
indices = pd.Series(df.index, index=df['title'])
def recommend(title, num_recommendations=5):
    if title not in indices:
        return f" x Movie '{title}' not found in the database."
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:num_recommendations+1]
    movie_indices = [i[0] for i in sim_scores]
    return df['title'].iloc[movie_indices]
user_input = input("Enter a movie title: ")
recommendations = recommend(user_input)
print("\n Recommendations:")
if isinstance(recommendations, str):
    print(recommendations)
else:
    for movie in recommendations:
        print(f"- {movie}")
